#!usr/bin/env python
PACKAGE = "waypts_nav_pid"

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
# name, type, level, help, default, min, max
gen.add("angular_tolerance", double_t, 0, "Only tune yaw when angular error is out of this range", 0.5, 0.0, 1.0)
gen.add("robot_radius", double_t, 0, "Robot radius", 0.5, 0.0, 2.0)
gen.add("trim_lin_vel", double_t, 0, "Linear velocity while rotation", 0.0, -1.0, 1.0)
gen.add("verbose", bool_t, 0, "Print information?", True)

gen.add("angular_kp", double_t, 0, "Proportional gain parameter of angular velocity", 1.0, 0.0, 5.0)
gen.add("angular_ki", double_t, 0, "Integral gain parameter of angular velocity", 0.0, 0.0, 5.0)
gen.add("angular_kd", double_t, 0, "Derivative gain parameter of angular velocity", 0.0, 0.0, 5.0)
gen.add("angular_min_integral", double_t, 0, "Min integral of angular velocity PID", 0.0, -1.0, 1.0)
gen.add("angular_max_integral", double_t, 0, "Max integral of angular velocity PID", 0.0, -1.0, 1.0)
gen.add("angular_min_output", double_t, 0, "Min angular velocity", -0.7, -1.0, 1.0)
gen.add("angular_max_output", double_t, 0, "Max angular velocity", 0.7, -1.0, 1.0)
gen.add("angular_delta", double_t, 0, "Change of angular velocity", 0.01, 0.0, 1.0)

gen.add("linear_kp", double_t, 0, "Proportional gain parameter of linear velocity", 1.5, 0.0, 5.0)
gen.add("linear_ki", double_t, 0, "Integral gain parameter of linear velocity", 0.0, 0.0, 5.0)
gen.add("linear_kd", double_t, 0, "Derivative gain parameter of linear velocity", 0.0, 0.0, 5.0)
gen.add("linear_min_integral", double_t, 0, "Min integral of linear velocity PID", 0.0, -1.0, 1.0)
gen.add("linear_max_integral", double_t, 0, "Max integral of linear velocity PID", 0.0, -1.0, 1.0)
gen.add("linear_min_output", double_t, 0, "Min linear velocity", -3.0, -3.0, 0.3)
gen.add("linear_max_output", double_t, 0, "Max linear velocity",  3.0, -3.0, 3.0)
gen.add("linear_delta", double_t, 0, "Change of linear velocity", 0.02, 0.0, 1.0)


exit(gen.generate(PACKAGE, "waypts_nav_pid", "Params"))



# gen.add("angular_tolerance", double_t, 0, "Only tune yaw when angular error is out of this range", 0.5, 0.0, 1.0)
# gen.add("robot_radius", double_t, 0, "Robot radius", 2.0, 0.0, 3.0)
# gen.add("trim_lin_vel", double_t, 0, "Linear velocity while rotation", 0.0, -1.0, 1.0)
# gen.add("verbose", bool_t, 0, "Print information?", True)

# gen.add("angular_kp", double_t, 0, "Proportional gain parameter of angular velocity", 1.0, 0.0, 5.0)
# gen.add("angular_ki", double_t, 0, "Integral gain parameter of angular velocity", 0.0, 0.0, 5.0)
# gen.add("angular_kd", double_t, 0, "Derivative gain parameter of angular velocity", 0.0, 0.0, 5.0)
# gen.add("angular_min_integral", double_t, 0, "Min integral of angular velocity PID", 0.0, -1.0, 1.0)
# gen.add("angular_max_integral", double_t, 0, "Max integral of angular velocity PID", 0.0, -1.0, 1.0)
# gen.add("angular_min_output", double_t, 0, "Min angular velocity", -0.7, -1.0, 1.0)
# gen.add("angular_max_output", double_t, 0, "Max angular velocity", 0.7, -1.0, 1.0)
# gen.add("angular_delta", double_t, 0, "Change of angular velocity", 0.01, 0.0, 1.0)

# gen.add("linear_kp", double_t, 0, "Proportional gain parameter of linear velocity", 1.0, 0.0, 5.0)
# gen.add("linear_ki", double_t, 0, "Integral gain parameter of linear velocity", 0.0, 0.0, 5.0)
# gen.add("linear_kd", double_t, 0, "Derivative gain parameter of linear velocity", 0.0, 0.0, 5.0)
# gen.add("linear_min_integral", double_t, 0, "Min integral of linear velocity PID", 0.0, -1.0, 1.0)
# gen.add("linear_max_integral", double_t, 0, "Max integral of linear velocity PID", 0.0, -1.0, 1.0)
# gen.add("linear_min_output", double_t, 0, "Min linear velocity", -0.5, -1.0, 1.0)
# gen.add("linear_max_output", double_t, 0, "Max linear velocity", 0.5, -1.0, 1.0)
# gen.add("linear_delta", double_t, 0, "Change of linear velocity", 0.01, 0.0, 1.0)
